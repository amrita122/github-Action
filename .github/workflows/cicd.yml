# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CICD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn compile
    
#  security-check:
 #   runs-on: self-hosted
  #  needs: build

   # steps:
    #- uses: actions/checkout@v4
    #- name: Setup Trivy (Fast + Safe)
    #  run: |
       #sudo apt-get update -y
       #sudo apt-get install -y --no-install-recommends wget gnupg lsb-release curl gpg
       #sudo mkdir -p /etc/apt/keyrings
       #curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | \
      # gpg --dearmor | sudo tee /etc/apt/keyrings/trivy.gpg > /dev/null
     #  echo "deb [signed-by=/etc/apt/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | \
    #   sudo tee /etc/apt/sources.list.d/trivy.list > /dev/null
   #    sudo apt-get update -y
  #     sudo apt-get install -y --no-install-recommends trivy



       
  #  - name: Trivy fs Scan
   #   run: trivy fs --format table -o fs-report.json .

    #- name: gitleaks installation
     # run: sudo apt install gitleaks -y

  #  - name: gitleaks code scan
   #   run: gitleaks detect source . -r gitleaks-report.json -f json
      
  test:
    runs-on: self-hosted
    needs: build

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Unit test cases
      run: mvn test
      
  build_sonar_scanner:
    runs-on: self-hosted
    needs: test

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: build project
      run: mvn package

    - uses: action/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonar-scan-action@v5.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-check-action@master
      with:
        pollingTimeoutSec: 600
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          

        
   
   
      
      




    
